model name "beam_5element" ;

// add node
add node #  1 at (   0.0*m ,    0.0*m,     0.0*m)  with 6 dofs;
add node #  2 at (   0.2*m ,    0.0*m,     0.0*m)  with 6 dofs;
add node #  3 at (   0.4*m ,    0.0*m,     0.0*m)  with 6 dofs;
add node #  4 at (   0.6*m ,    0.0*m,     0.0*m)  with 6 dofs;
add node #  5 at (   0.8*m ,    0.0*m,     0.0*m)  with 6 dofs;
add node #  6 at (   1.0*m ,    0.0*m,     0.0*m)  with 6 dofs;
	
// Geometry: width and height
b=0.2*m;
h=0.2*m;

// Materials: properties
natural_period    = 1*s;				
natural_frequency  = 2*pi/natural_period;
elastic_constant  = 1e9*N/m^2; 
I=b*h^3/12.0;
A=b*h;
L=1*m;
rho 	= (1.8751)^4*elastic_constant*I/(natural_frequency^2*L^4*A);
possion_ratio=0.3;

// add elements
ii=1;
while (ii<6) {
	add element # ii type beam_elastic with nodes (ii,ii+1) 
		cross_section =   b*h 
		elastic_modulus =  elastic_constant
		shear_modulus =  elastic_constant/2/(1+possion_ratio)
		torsion_Jx =  0.33*b*h^3
		bending_Iy =  b*h^3/12
		bending_Iz =  b*h^3/12
		mass_density = rho
		xz_plane_vector = ( 1, 0, 1) 
		joint_1_offset = (0*m, 0*m, 0*m) 
		joint_2_offset = (0*m, 0*m, 0*m);
	ii+=1;
}

// add boundary condition
fix node #      1 dofs all;
ii=2;
while (ii<7) {
	fix node # ii dofs uy;
	ii+=1;
}


beamMass=rho*A*L;
add mass to node # 3 
	mx =  beamMass
	my =  beamMass
	mz = beamMass
	Imx = beamMass*L^2
	Imy = beamMass*L^2
	Imz = beamMass*L^2;
// // ----------------------------------------------------------------------------
// // --no-damping-------------------------------------------------------------
// // ----------------------------------------------------------------------------
// new loading stage "no-damping";
// add load # 1 to node # 6 type path_time_series 
// 	Fz =  1.*N
// 	series_file = "freeVibration.txt" ;
// define dynamic integrator Newmark with gamma = 0.5 beta = 0.25;
// define algorithm With_no_convergence_check ;
// define solver ProfileSPD;
// simulate 100 steps using transient algorithm 
// 	time_step = 0.1*s;

// // ----------------------------------------------------------------------------
// // --numerical-damping-------------------------------------------------------------
// // ----------------------------------------------------------------------------
// remove load # 2;
// new loading stage "numerical-damping";
// add load # 3 to node # 6 type path_time_series 
// 	Fz =  1.*N
// 	series_file = "freeVibration.txt" ;
// define dynamic integrator Newmark with gamma = 0.6 beta = 0.3025;
// define algorithm With_no_convergence_check ;
// define solver ProfileSPD;
// simulate 100 steps using transient algorithm 
// 	time_step = 0.1*s;


// // ----------------------------------------------------------------------------
// // --Rayleigh-damping-------------------------------------------------------------
// // ----------------------------------------------------------------------------
// remove load # 3;

// simulate using eigen algorithm	number_of_modes = 4;
f1=0.407108/s;
f2=0.552311/s;
w1 = 2*pi*f1;
w2 = 2*pi*f2;
xi=0.05;
rayl_a1 = 2*xi/(w1 + w2);
rayl_a0 = rayl_a1*w1*w2;

	
add damping # 1 type Rayleigh with 
	a0 =  rayl_a0
	a1 =  rayl_a1
	stiffness_to_use = Initial_Stiffness;
jj=1;
while (jj<6) {
	add damping # 1 to element # jj;
	jj+=1;
}
new loading stage "Rayleigh-damping";
add load # 4 to node # 6 type path_time_series 
	Fz =  1.*N
	series_file = "freeVibration.txt" ;
define dynamic integrator Newmark with gamma = 0.5 beta = 0.25;
define algorithm With_no_convergence_check ;
define solver ProfileSPD;
simulate 1000 steps using transient algorithm 
	time_step = 0.01*s;




// // ----------------------------------------------------------------------------
// // --HHT-damping-------------------------------------------------------------
// // ----------------------------------------------------------------------------
// remove load # 4;
// new loading stage "HHT-damping";
// add load # 5 to node # 6 type path_time_series 
// 	Fz =  5.*kN
// 	series_file = "freeVibration.txt" ;
// define dynamic integrator Hilber_Hughes_Taylor with alpha = -0.20;
// define algorithm With_no_convergence_check ;
// define solver ProfileSPD;
// simulate 300 steps using transient algorithm 
// 	time_step = 0.2*s;

// // ----------------------------------------------------------------------------
// // --Caughey3rd-damping--------------------------------------------------------
// // ----------------------------------------------------------------------------
// add damping # 2 type Caughey3rd with 
// 	a0 =  0.560523/s
// 	a1 =  0.0730746*s
// 	a2 =  0.000361559*s^3
// 	stiffness_to_use = Last_Committed_Stiffness;
// kk=1;
// while (kk<6) {
// 	add damping # 2 to element # kk;
// 	kk+=1;
// }
// new loading stage "Caughey3rd-damping";
// add load # 6 to node # 6 type path_time_series 
// 	Fz =  10.*kN
// 	series_file = "freeVibration.txt" ;
// define dynamic integrator Newmark with gamma = 0.5 beta = 0.25;
// define algorithm With_no_convergence_check ;
// define solver ProfileSPD;
// simulate 100 steps using transient algorithm 
// 	time_step = 0.3*s;


// // ----------------------------------------------------------------------------
// // --Caughey4th-damping--------------------------------------------------------
// // ----------------------------------------------------------------------------
// add damping # 2 type Caughey4th with 
// 	a0 =  0.560523/s
// 	a1 =  0.0756472*s
// 	a2 =  0.000517195*s^3
// 	a3 =  1.20005*10^(-6)*s^5
// 	stiffness_to_use = Last_Committed_Stiffness;
// kk=1;
// while (kk<6) {
// 	add damping # 2 to element # kk;
// 	kk+=1;
// }
// new loading stage "Caughey4th-damping";
// add load # 6 to node # 6 type path_time_series 
// 	Fz =  10.*kN
// 	series_file = "freeVibration.txt" ;
// define dynamic integrator Newmark with gamma = 0.5 beta = 0.25;
// define algorithm With_no_convergence_check ;
// define solver ProfileSPD;
// simulate 100 steps using transient algorithm 
// 	time_step = 0.3*s;


bye;