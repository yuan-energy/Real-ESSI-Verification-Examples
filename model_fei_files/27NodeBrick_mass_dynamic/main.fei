model name "brick-mass_1element" ;

// Geometry: width and height
b=0.2*m;
h=0.2*m;

// Materials: properties
natural_period    = 1*s;				
natural_frequency  = 2*pi/natural_period;
elastic_constant  = 1e9*N/m^2; 
I=b*h^3/12.0;
A=b*h;
L=1*m;
rho 	= (1.8751)^4*elastic_constant*I/(natural_frequency^2*L^4*A);
possion_ratio=0.3;


add material # 1 type linear_elastic_isotropic_3d_LT
  mass_density = rho
  elastic_modulus = elastic_constant
  poisson_ratio = possion_ratio;

add node #        1 at (   0.0000 *m,   0.2000 *m,  0.0000 *m) with 3 dofs;
add node #        2 at (   0.0000 *m,   0.0000 *m,  0.0000 *m) with 3 dofs;
add node #        3 at (   1.0000 *m,   0.2000 *m,  0.0000 *m) with 3 dofs;
add node #        4 at (   1.0000 *m,   0.0000 *m,  0.0000 *m) with 3 dofs;
add node #        5 at (   0.0000 *m,   0.0000 *m,  0.2000 *m) with 3 dofs;
add node #        6 at (   1.0000 *m,   0.0000 *m,  0.2000 *m) with 3 dofs;
add node #        7 at (   1.0000 *m,   0.2000 *m,  0.2000 *m) with 3 dofs;
add node #        8 at (   0.0000 *m,   0.2000 *m,  0.2000 *m) with 3 dofs;
add node #        9 at (   0.0000 *m,   0.1000 *m,  0.0000 *m) with 3 dofs;
add node #       10 at (   0.5000 *m,   0.2000 *m,  0.0000 *m) with 3 dofs;
add node #       11 at (   1.0000 *m,   0.1000 *m,  0.0000 *m) with 3 dofs;
add node #       12 at (   0.5000 *m,   0.0000 *m,  0.0000 *m) with 3 dofs;
add node #       13 at (   0.0000 *m,   0.1000 *m,  0.2000 *m) with 3 dofs;
add node #       14 at (   0.5000 *m,   0.2000 *m,  0.2000 *m) with 3 dofs;
add node #       15 at (   1.0000 *m,   0.1000 *m,  0.2000 *m) with 3 dofs;
add node #       16 at (   0.5000 *m,   0.0000 *m,  0.2000 *m) with 3 dofs;
add node #       17 at (   0.0000 *m,   0.0000 *m,  0.1000 *m) with 3 dofs;
add node #       18 at (   0.0000 *m,   0.2000 *m,  0.1000 *m) with 3 dofs;
add node #       19 at (   1.0000 *m,   0.2000 *m,  0.1000 *m) with 3 dofs;
add node #       20 at (   1.0000 *m,   0.0000 *m,  0.1000 *m) with 3 dofs;
add node #       21 at (   0.5000 *m,   0.1000 *m,  0.1000 *m) with 3 dofs;
add node #       22 at (   0.0000 *m,   0.1000 *m,  0.1000 *m) with 3 dofs;
add node #       23 at (   0.5000 *m,   0.2000 *m,  0.1000 *m) with 3 dofs;
add node #       24 at (   1.0000 *m,   0.1000 *m,  0.1000 *m) with 3 dofs;
add node #       25 at (   0.5000 *m,   0.0000 *m,  0.1000 *m) with 3 dofs;
add node #       26 at (   0.5000 *m,   0.1000 *m,  0.0000 *m) with 3 dofs;
add node #       27 at (   0.5000 *m,   0.1000 *m,  0.2000 *m) with 3 dofs;

add element #         1 type 27NodeBrickLT with nodes(       2,       1,       3,       4,       5,       8,       7,       6,       9,      10,      11,      12,      13,      14,      15,      16,      17,      18,      19,      20,      21,      22,      23,      24,      25,      26,      27) use material #        1; 

fix node # 1 dofs all;
fix node # 2 dofs all;
fix node # 5 dofs all;
fix node # 8 dofs all;
fix node # 9 dofs all;
fix node # 13 dofs all;
fix node # 17 dofs all;
fix node # 18 dofs all;
fix node # 22 dofs all;


// Mapping from 3 dofs to 6 dofs. 
add node #      1003 at (   1.0000 *m,   0.2000 *m,  0.0000 *m) with 6 dofs;
add node #      1004 at (   1.0000 *m,   0.0000 *m,  0.0000 *m) with 6 dofs;
add node #      1006 at (   1.0000 *m,   0.0000 *m,  0.2000 *m) with 6 dofs;
add node #      1007 at (   1.0000 *m,   0.2000 *m,  0.2000 *m) with 6 dofs;
// And connect the nodes at the same location.
add constraint equal dof with master node # 3 and slave node #  1003 dof to constrain ux uy uz;
add constraint equal dof with master node # 4 and slave node #  1004 dof to constrain ux uy uz;
add constraint equal dof with master node # 6 and slave node #  1006 dof to constrain ux uy uz;
add constraint equal dof with master node # 7 and slave node #  1007 dof to constrain ux uy uz;


	

add mass to node # 24 	mx =  rho*A*L	my =  rho*A*L	mz = rho*A*L;

// add 6 beams to connect the mass 
smallb=0.01*m;
smallh=0.01*m;
smallE  = 1e9*N/m^2; 
smallnu=0.3;
smallrho=0*kg/m^3;
smallI=smallb*smallh^3/12.0;
add element # 11 type beam_elastic with nodes (1003,1004) 
	cross_section =   smallb*smallh 
	elastic_modulus =  smallE
	shear_modulus =  smallE/2/(1+smallnu)
	torsion_Jx =  0.33*smallb*smallh^3
	bending_Iy =  smallI
	bending_Iz =  smallI
	mass_density = smallrho
	xz_plane_vector = ( 1, 0, 1) 
	joint_1_offset = (0*m, 0*m, 0*m) 
	joint_2_offset = (0*m, 0*m, 0*m);
add element # 12 type beam_elastic with nodes (1003,1006) 
	cross_section =   smallb*smallh 
	elastic_modulus =  smallE
	shear_modulus =  smallE/2/(1+smallnu)
	torsion_Jx =  0.33*smallb*smallh^3
	bending_Iy =  smallI
	bending_Iz =  smallI
	mass_density = smallrho
	xz_plane_vector = ( 1, 0, 1) 
	joint_1_offset = (0*m, 0*m, 0*m) 
	joint_2_offset = (0*m, 0*m, 0*m);
add element # 13 type beam_elastic with nodes (1003,1007) 
	cross_section =   smallb*smallh 
	elastic_modulus =  smallE
	shear_modulus =  smallE/2/(1+smallnu)
	torsion_Jx =  0.33*smallb*smallh^3
	bending_Iy =  smallI
	bending_Iz =  smallI
	mass_density = smallrho
	xz_plane_vector = ( 1, 0, 1) 
	joint_1_offset = (0*m, 0*m, 0*m) 
	joint_2_offset = (0*m, 0*m, 0*m);
add element # 14 type beam_elastic with nodes (1004,1006) 
	cross_section =   smallb*smallh 
	elastic_modulus =  smallE
	shear_modulus =  smallE/2/(1+smallnu)
	torsion_Jx =  0.33*smallb*smallh^3
	bending_Iy =  smallI
	bending_Iz =  smallI
	mass_density = smallrho
	xz_plane_vector = ( 1, 0, 1) 
	joint_1_offset = (0*m, 0*m, 0*m) 
	joint_2_offset = (0*m, 0*m, 0*m);
add element # 15 type beam_elastic with nodes (1004,1007) 
	cross_section =   smallb*smallh 
	elastic_modulus =  smallE
	shear_modulus =  smallE/2/(1+smallnu)
	torsion_Jx =  0.33*smallb*smallh^3
	bending_Iy =  smallI
	bending_Iz =  smallI
	mass_density = smallrho
	xz_plane_vector = ( 1, 0, 1) 
	joint_1_offset = (0*m, 0*m, 0*m) 
	joint_2_offset = (0*m, 0*m, 0*m);
add element # 16 type beam_elastic with nodes (1006,1007) 
	cross_section =   smallb*smallh 
	elastic_modulus =  smallE
	shear_modulus =  smallE/2/(1+smallnu)
	torsion_Jx =  0.33*smallb*smallh^3
	bending_Iy =  smallI
	bending_Iz =  smallI
	mass_density = smallrho
	xz_plane_vector = ( 1, 0, 1) 
	joint_1_offset = (0*m, 0*m, 0*m) 
	joint_2_offset = (0*m, 0*m, 0*m);


// // ----------------------------------------------------------------------------
// // --slowLoading---------------------------------------------------------------
// // add the 1 Newton load in 180 seconds.
// // ----------------------------------------------------------------------------
// new loading stage "slowLoading";
// add load # 1 to node # 4 type path_time_series Fz=1/36.0*N series_file = "slowLoading.txt" ; 
// add load # 2 to node # 6 type path_time_series Fz=1/36.0*N series_file = "slowLoading.txt" ; 
// add load # 3 to node # 3 type path_time_series Fz=1/36.0*N series_file = "slowLoading.txt" ; 
// add load # 4 to node # 7 type path_time_series Fz=1/36.0*N series_file = "slowLoading.txt" ; 
// add load # 5 to node # 20 type path_time_series Fz=1/9.0*N series_file = "slowLoading.txt" ; 
// add load # 6 to node # 11 type path_time_series Fz=1/9.0*N series_file = "slowLoading.txt" ; 
// add load # 7 to node # 15 type path_time_series Fz=1/9.0*N series_file = "slowLoading.txt" ; 
// add load # 8 to node # 19 type path_time_series Fz=1/9.0*N series_file = "slowLoading.txt" ; 
// add load # 9 to node # 24 type path_time_series Fz=4/9.0*N series_file = "slowLoading.txt" ; 
// // add algorithm and solver
// define dynamic integrator Newmark with gamma = 0.5 beta = 0.25;
// define algorithm With_no_convergence_check ;
// define solver ProfileSPD;
// simulate 2000 steps using transient algorithm 
// 	time_step = 0.1*s;

// // ----------------------------------------------------------------------------
// // --fastLoading---------------------------------------------------------------
// // add the 1 Newton load in 0.6 seconds.
// // ----------------------------------------------------------------------------
// new loading stage "fastLoading";
// add load # 101 to node # 4 type path_time_series Fz=1/36.0*N series_file = "fastLoading.txt" ; 
// add load # 102 to node # 6 type path_time_series Fz=1/36.0*N series_file = "fastLoading.txt" ; 
// add load # 103 to node # 3 type path_time_series Fz=1/36.0*N series_file = "fastLoading.txt" ; 
// add load # 104 to node # 7 type path_time_series Fz=1/36.0*N series_file = "fastLoading.txt" ; 
// add load # 105 to node # 20 type path_time_series Fz=1/9.0*N series_file = "fastLoading.txt" ; 
// add load # 106 to node # 11 type path_time_series Fz=1/9.0*N series_file = "fastLoading.txt" ; 
// add load # 107 to node # 15 type path_time_series Fz=1/9.0*N series_file = "fastLoading.txt" ; 
// add load # 108 to node # 19 type path_time_series Fz=1/9.0*N series_file = "fastLoading.txt" ; 
// add load # 109 to node # 24 type path_time_series Fz=4/9.0*N series_file = "fastLoading.txt" ; 
// // add algorithm and solver
// define dynamic integrator Newmark with gamma = 0.5 beta = 0.25;
// define algorithm With_no_convergence_check ;
// define solver ProfileSPD;
// simulate 1000 steps using transient algorithm 
// 	time_step = 0.01*s;

// // ----------------------------------------------------------------------------
// // --freeVibration---------------------------------------------------------------
// // ----------------------------------------------------------------------------
new loading stage "freeVibration";
add load # 201 to node # 4 type path_time_series Fz=1/36.0*N series_file = "freeVibration.txt" ; 
add load # 202 to node # 6 type path_time_series Fz=1/36.0*N series_file = "freeVibration.txt" ; 
add load # 203 to node # 3 type path_time_series Fz=1/36.0*N series_file = "freeVibration.txt" ; 
add load # 204 to node # 7 type path_time_series Fz=1/36.0*N series_file = "freeVibration.txt" ; 
add load # 205 to node # 20 type path_time_series Fz=1/9.0*N series_file = "freeVibration.txt" ; 
add load # 206 to node # 11 type path_time_series Fz=1/9.0*N series_file = "freeVibration.txt" ; 
add load # 207 to node # 15 type path_time_series Fz=1/9.0*N series_file = "freeVibration.txt" ; 
add load # 208 to node # 19 type path_time_series Fz=1/9.0*N series_file = "freeVibration.txt" ; 
add load # 209 to node # 24 type path_time_series Fz=4/9.0*N series_file = "freeVibration.txt" ; 
// add algorithm and solver
define dynamic integrator Newmark with gamma = 0.5 beta = 0.25;
define algorithm With_no_convergence_check ;
define solver ProfileSPD;
simulate 100 steps using transient algorithm 
	time_step = 0.1*s;

// end
bye;